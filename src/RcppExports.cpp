// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// TwoPhase_MLE0_MEXY_CV_loglik
List TwoPhase_MLE0_MEXY_CV_loglik(const Eigen::Map<Eigen::VectorXd>& Y_tilde, const Eigen::Map<Eigen::MatrixXd>& X_tilde, const Eigen::Map<Eigen::VectorXd>& Y, const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& Z, const Eigen::Map<Eigen::MatrixXd>& Bspline, const int& MAX_ITER, const double& TOL, const Eigen::Map<Eigen::VectorXd>& Train);
RcppExport SEXP _sleev_TwoPhase_MLE0_MEXY_CV_loglik(SEXP Y_tildeSEXP, SEXP X_tildeSEXP, SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BsplineSEXP, SEXP MAX_ITERSEXP, SEXP TOLSEXP, SEXP TrainSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y_tilde(Y_tildeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X_tilde(X_tildeSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Bspline(BsplineSEXP);
    Rcpp::traits::input_parameter< const int& >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const double& >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Train(TrainSEXP);
    rcpp_result_gen = Rcpp::wrap(TwoPhase_MLE0_MEXY_CV_loglik(Y_tilde, X_tilde, Y, X, Z, Bspline, MAX_ITER, TOL, Train));
    return rcpp_result_gen;
END_RCPP
}
// TwoPhase_MLE0_MEXY
List TwoPhase_MLE0_MEXY(const Eigen::Map<Eigen::VectorXd>& Y_unval, const Eigen::Map<Eigen::MatrixXd>& X_unval, const Eigen::Map<Eigen::VectorXd>& Y, const Eigen::Map<Eigen::MatrixXd>& X, const Eigen::Map<Eigen::MatrixXd>& Z, const Eigen::Map<Eigen::MatrixXd>& Bspline, const double& hn, const int& MAX_ITER, const double& TOL, const int& noSE);
RcppExport SEXP _sleev_TwoPhase_MLE0_MEXY(SEXP Y_unvalSEXP, SEXP X_unvalSEXP, SEXP YSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP BsplineSEXP, SEXP hnSEXP, SEXP MAX_ITERSEXP, SEXP TOLSEXP, SEXP noSESEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y_unval(Y_unvalSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X_unval(X_unvalSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd>& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type Bspline(BsplineSEXP);
    Rcpp::traits::input_parameter< const double& >::type hn(hnSEXP);
    Rcpp::traits::input_parameter< const int& >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< const double& >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< const int& >::type noSE(noSESEXP);
    rcpp_result_gen = Rcpp::wrap(TwoPhase_MLE0_MEXY(Y_unval, X_unval, Y, X, Z, Bspline, hn, MAX_ITER, TOL, noSE));
    return rcpp_result_gen;
END_RCPP
}
// lengthenWT
arma::vec lengthenWT(const arma::vec& w_t_original, const int& n, const bool& modifyW_T);
RcppExport SEXP _sleev_lengthenWT(SEXP w_t_originalSEXP, SEXP nSEXP, SEXP modifyW_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type w_t_original(w_t_originalSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const bool& >::type modifyW_T(modifyW_TSEXP);
    rcpp_result_gen = Rcpp::wrap(lengthenWT(w_t_original, n, modifyW_T));
    return rcpp_result_gen;
END_RCPP
}
// calculateMu
arma::vec calculateMu(const arma::mat& design_mat, const arma::mat& prev);
RcppExport SEXP _sleev_calculateMu(SEXP design_matSEXP, SEXP prevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev(prevSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateMu(design_mat, prev));
    return rcpp_result_gen;
END_RCPP
}
// calculateGradient
arma::vec calculateGradient(arma::vec& w_t, const int& n, const arma::mat& design_mat, const arma::vec& Y_col, const arma::vec& muVector, const bool& modifyW_T);
RcppExport SEXP _sleev_calculateGradient(SEXP w_tSEXP, SEXP nSEXP, SEXP design_matSEXP, SEXP Y_colSEXP, SEXP muVectorSEXP, SEXP modifyW_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type w_t(w_tSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Y_col(Y_colSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type muVector(muVectorSEXP);
    Rcpp::traits::input_parameter< const bool& >::type modifyW_T(modifyW_TSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateGradient(w_t, n, design_mat, Y_col, muVector, modifyW_T));
    return rcpp_result_gen;
END_RCPP
}
// calculateHessian
arma::mat calculateHessian(const arma::mat& design_mat, arma::vec& w_t, const arma::vec& muVector, const int& n, arma::vec& mus, const bool& modifyW_T);
RcppExport SEXP _sleev_calculateHessian(SEXP design_matSEXP, SEXP w_tSEXP, SEXP muVectorSEXP, SEXP nSEXP, SEXP musSEXP, SEXP modifyW_TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design_mat(design_matSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type w_t(w_tSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type muVector(muVectorSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mus(musSEXP);
    Rcpp::traits::input_parameter< const bool& >::type modifyW_T(modifyW_TSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateHessian(design_mat, w_t, muVector, n, mus, modifyW_T));
    return rcpp_result_gen;
END_RCPP
}
// pYstarCalc
arma::vec pYstarCalc(const arma::mat& gamma_design_mat, const int& n, const int& excludeRows, const arma::mat& prev_gamma, const arma::mat& comp_dat_all, const int& Y_unval_index, arma::vec& pYstar, arma::vec& mu_gamma);
RcppExport SEXP _sleev_pYstarCalc(SEXP gamma_design_matSEXP, SEXP nSEXP, SEXP excludeRowsSEXP, SEXP prev_gammaSEXP, SEXP comp_dat_allSEXP, SEXP Y_unval_indexSEXP, SEXP pYstarSEXP, SEXP mu_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma_design_mat(gamma_design_matSEXP);
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type excludeRows(excludeRowsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_gamma(prev_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type comp_dat_all(comp_dat_allSEXP);
    Rcpp::traits::input_parameter< const int& >::type Y_unval_index(Y_unval_indexSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type pYstar(pYstarSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu_gamma(mu_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(pYstarCalc(gamma_design_mat, n, excludeRows, prev_gamma, comp_dat_all, Y_unval_index, pYstar, mu_gamma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sleev_TwoPhase_MLE0_MEXY_CV_loglik", (DL_FUNC) &_sleev_TwoPhase_MLE0_MEXY_CV_loglik, 9},
    {"_sleev_TwoPhase_MLE0_MEXY", (DL_FUNC) &_sleev_TwoPhase_MLE0_MEXY, 10},
    {"_sleev_lengthenWT", (DL_FUNC) &_sleev_lengthenWT, 3},
    {"_sleev_calculateMu", (DL_FUNC) &_sleev_calculateMu, 2},
    {"_sleev_calculateGradient", (DL_FUNC) &_sleev_calculateGradient, 6},
    {"_sleev_calculateHessian", (DL_FUNC) &_sleev_calculateHessian, 6},
    {"_sleev_pYstarCalc", (DL_FUNC) &_sleev_pYstarCalc, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_sleev(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
